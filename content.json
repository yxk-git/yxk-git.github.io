[{"title":"《异常和多线程》","date":"2019-07-18T12:51:03.666Z","path":"2019/07/18/异常和多线程/","text":"异常 &gt;异常是程序出现问题(异常不是语法错误!!) 异常的继承体系 Throwable 异常的根类 |- Error 错误类(通常是系统引起) |- Exception 异常类 |- 编译时异常:异常在编译时期就报错 &gt;Exception类以及其子类(RuntimeException除外) |- 运行时异常:编译时期不会报错,运行时报错! &gt;RuntimeException以及其子类 异常类中常用方法 1.printStackTrace();打印异常对象中的详细信息(类型,原因,位置) 2.getMessage();获取异常对象中原因 3.toString();获取异常的类型和异常描述信息(不用) 异常的分类 1.编译时异常:在编译时期报的异常 &gt;Exception类以及其子类(RuntimeException除外) 2.运行时异常:编译时期有异常也不报异常,运行时再报异常 &gt;RuntimeException以及其子类 遇到异常的2种处理方式 1.throws声明抛出异常 &gt;throws作用:形容词,声明某个方法可能抛出某种异常,要求调用者必须处理该异常 当调用方法时(必须处理该异常) 1.不处理,再次向上声明抛出 2.try..catch捕获异常 作用:可以使程序在局部出异常的情况下,整体正常运行 finally代码块 &gt;finally不能单独使用 作用: 1.写在finally中的代码无论如何都会执行 2.一般我们会在finally中写释放资源有关的代码 3.释放资源,比如:关闭IO流,关闭数据类连接,关闭网络连接 自定义异常 1.为什么要自定义异常 &gt;因为JDK的异常不可能描述实际开发中所有的问题 自定义异常的步骤 1.创建一个类,必须以Exception结尾 2.该类必须继承Excepton或者RuntimeException 3.异常类必须有至少两个构造:无参构造和String参数构造 多线程 1.并行和并发 &gt;并行:两个事件在同一时刻都在发生 &gt;并发:两个事件在同一个时间段内都在发生 2.进程和线程 &gt;进程:正在运行的程序 &gt;线程:进程中完成某一个特定功能的执行单元 进程和线程的一些区别(了解) &gt;每个进程拥有独立内存空间(独立栈和独立堆) &gt;每个线程拥有独立的栈空间,堆空间是共享 线程调度 &gt;就是CPU在多个线程之间进行快速的切换 &gt;线程调度分为两种: 1.分时调度:每个线程平均分配CPU的执行时间 2.抢占式调用:每个线程随机分配CPU的时间,具体的随机概率和优先级有关 &gt;优先级越高的抢到CPU的概率越高 Java采用抢占式调度,Java程序运行时,默认至少有三个线程 1.main方法所在的线程,我们称为主线程 2.垃圾回收器所在的线程,垃圾回收线程 3.异常打印时也是一个线程,异常线程 线程类(Thread) &gt;根据API的描述: 1.一种方法是将类声明为 Thread 的子类。 2.该子类应重写 Thread 类的 run 方法。 3.接下来可以分配并启动该子类的实例 创建新线程方式一 步骤: 1.创建子类继承Thread 2.子类重写run方法(run方法内就是线程的任务代码) 3.创建子类的对象(其实一个线程对象) 4.启动线程(调用start方法) 多线程的内存分配： 1.一个Java程序就是一个进程,拥有独立的栈和堆 2.Java进程中每个线程都有独立的栈,共享整个进程的堆 创建新线程方式二API描述: 1.另一种方法是声明实现 Runnable 接口的类。 2.该类然后实现 run 方法。然后可以分配该类的实例， 3.在创建 Thread 时作为一个参数来传递并启动。 步骤: 1.创建实现类 实现 Runnable接口 2.重写接口中run方法 3.创建实现类的对象 4.创建Thread对象,传入实现类对象 5.调用Thread对象的start方法启动 两种创建线程方式的比较 1.继承方式只能单继承,实现方式弥补单继承的不足 2.继承方式线程对象和任务对象是紧紧耦合的,而实现方式线程对象和任务对象是解耦合的 3.以后我们用的线程池,提交时只能提交任务对象(Runnable/Callable),不提交线程对象 总结:JDK强烈建议,尽量使用实现类方式创建线程 线程安全 &gt;线程安全问题出现的原因 必须满足: 1.多线程同时运行 2.执行同一个任务 3.操作同一个共享数据 线程安全问题的演示:卖票案例 1.重复数据产生原因: 2.非法数据0,-1产生的原因: 三种线程同步的方式 1.同步代码块(最常用的方式) 格式: synchronized(锁对象){ 需要同步的那些代码 }锁对象:可以是任意对象,但是必须是同一个对象 2.同步方法 格式: public synchronized void method(){ 需要同步的那些代码 }注意:同步方法也是需要锁对象的,但是锁对象不需要我们提供,默认使用this 如果同步方式是静态的,那么也需要锁,默认使用当前类的字节码文件 3.Lock锁 格式: Lock lock = new ReentrantLock(); lock.lock(); 需要同步的那些代码 lock.unlock(); 线程的状态 线程的六种状态 1.新建状态(New) 刚刚创建,但是没有启动的线程 2.可运行状态(Runnable) 新建状态的线程,调用了启动方法 3.锁阻塞状态(Blocked) 当前需要锁,但是锁被其他线程持有 4.限时等待状态(Timed_waiting) 在线程中调用Thread.sleep(毫秒值) 5.无限等待状态(Waiting) a.线程如何进入Waiting(无线等待状态) 1.当前线程必须先持有锁对象 2.调用锁对象的wait()方法 – 线程就可以进入无限等待了 3.当前线程进入无限等待之前,先自动释放锁对象 b.其他线程如何唤醒Waiting状态的线程 1.其他线程也需要持有锁(必须和无限等待线程释放的锁是 同一个锁对象) 2.调用锁对象的notify()方法 – 唤醒无限等待中的那个线程 3.被唤醒线程会进入锁阻塞状态,直到再次持有同一个锁对象,才可进入运行状态 6.消亡状态(Terminated)","tags":[]},{"title":"《常用API》","date":"2019-07-18T12:50:57.378Z","path":"2019/07/18/常用API/","text":"Object类 类Object是类层次结构的跟类。所有对象(包括数组)都有这个类的方法 1.toString方法(返回该对象的字符串表示) &gt;默认的表示格式: 包名.类名@地址值 &gt;在实际开发中需要重写toString方法;返回对象的属性值,而不是地址值 2.equals方法 &gt;格式:对象名.equals(Object obj); &gt;在Object类中,equals方法:默认比较是对象的地址值 &gt;在实际开发中,我们也会重写equals方法:比较两个对象的内容,而不是地址值 注意: toString方法并需要我们调用，我们只需要打印对象名,剩下的编译器会自动补全 ==与equals的区别 1.如果是基本类型:== 比较两个基本类型的数值 2.如果是引用类型:== 比较两个对象的地址值 注意:1.equals不能比较基本类型 2.equals默认比较(Object类中)的也是地址值,如果重写了那就按照重写的规则比较 时间日期类Date类 类Date表示特定的瞬间,精确到毫秒。 构造方法: public Date();表示当前的系统时间 public Date(long time);创建一个距离标准时间time毫秒后的时间 (英国)标准时间:1970-01-01 00:00:00 (中国)标准时间:1970-01-01 08:00:00 成员方法: public long getTime();获取当前时间对象距离标准时间的毫秒值 public void setTime(long time);修改当前时间对象中毫秒值 DateFormat类(时间日期格式化类) DateFormat是一个日期/时间格式化类的父类(抽象类),使用它的子类:SimpleDateFormat 构造方法: public SimpleDateFormat(String pattern);以指定的模式创建一个简单的日期格式化对象 成员方法: public String format(Date date);将日期对象格式化为字符串 public Date parse(String time);将字符串转成Date对象 Calendar类 Calendar也是一个表示日期和时间的类,但是是一个抽象类1.获取方式 public static Calendar getInstance();使用默认时区和语言环境获得一个日历对象。 常用方法 public int get(int field);根据编号,获取对应的字段的值 public void set(int field,int value);根据编号,修改字段的值 public void add(int field,int value);根据编号,增加字段的值 Math类 包含用于执行基本数学运算的方法,是一个工具类,其中所有的方法都是静态的 常用方法 public static double max(double d1,double d2);求最大值 public static double min(double d1,double d2);求最小值 public static double abs(double d);求绝对值 public static double ceil(double d);向上取整 public static double floor(double d);向下取整 public static double random();产生一个随机(范围[0,1))小数 public static long round(double d);四舍五入到整数 public static double pow(double d1,double d2);求次幂 System类 包含一些有用的类字段和方法。它不能创建对象(原因在于构造方法私有化了)。 常用方法 public static void exit(int status);退出JVM public static long currentTimeMillis();获取当前时间距离标准时间的毫秒值 System.currentTimeMillis()他可以用于计算程序的运行时间 包装类 基本类型对应的引用类型我们称为包装类,全称基本数据类型的包装类 基本类型 包装类 byte Byte short Short char Character int Integer long Long float Float double Double boolean Boolean 2.Integer的构造和静态方法 在JDK5之前包装类和基本类型是不能直接赋值 Integer i = new Integer(10); 装箱 Integer i = Integer.valueof(10);装箱 Integer i = Integer.valueof(“10”);装箱 int a = i.intValue();拆箱 自动拆箱和自动装箱的介绍 &gt;拆箱:把包装类变成基本类型 &gt;装箱:把基本类型变成包装类 基本类型与字符串之间的转换基本类型—–&gt;字符串 int a = 10; 1.直接加”” String str = a + “”; 2.先包装成Integer Integer i = a; String str = i.toString(); 字符串—–&gt;基本类型 String a = “10”; 包装类中有一个方法,Integer.parseInt(String str); 1.调用Integer的静态方法 int i = Integer.parseInt(a); 2.先把字符串变成包装类,再拆箱 integer i = Integer.valueof(a); int j = i.intValue();","tags":[]},{"title":"《final、static关键字和内部类》","date":"2019-07-18T12:45:52.562Z","path":"2019/07/18/final、static关键字和内部类/","text":"final、static关键字和内部类final关键字(final:不可变的) 1.final修饰类 &gt;被final修饰的类,被称为太监类,不能被继承 2.final修饰方法 &gt;被final修饰的方法,不能被子类重写 3.final修饰局部变量 &gt;被final修饰的局部变量,只能赋值一次 final修饰引用类型的变量 &gt;被final修饰的引用类型变量,其保存的地址值不能修改,但是地址所指的空间中内容可以修改 final修饰成员变量 &gt;被final修饰的成员变量,必须在创建对象之前赋值 １.定义成员变量时,直接给值 ２.定义成员变量时不赋值,在构造方法中赋值 static关键字的含义(static: 静态的) &gt;可以用来修饰类的成员变量和成员方法 １.被static修饰成员变量,一般称为静态变量,类变量 ２.被static修饰成员方法,一般称为静态方法,类方法 ３.被static修饰的成员,可以直接通过类名调用,不需要创建对象 static修饰成员变量 １.被static修饰的成员变量,称为静态变量(类变量) ２.被static修饰的成员变量,在内存中只有一个,无论创建多少个对象,共用该静态成员变量 注意:我们不建议使用对象名去访问静态成员变量 建议直接通过类名去访问静态成员变量 static修饰成员方法 &gt;被static修饰的成员方法,称为静态方法(类方法) &gt;特点:不需要通过对象名去调用,直接通过类名去调用 &gt;作用:用于编写工具类(Arrays,Collections,Objects) 总结static成员的用法和注意事项 1.静态的成员,可以通过类名直接访问,也可以通过对象名访问 &gt;但是建议通过类名直接访问 2.静态和非静态之间的相互访问问题 &gt;静态和静态之间可以相互访问 &gt;非静态和非静态之间也可以相互访问 &gt;静态 不能访问 非静态 &gt;非静态 可以访问 静态 为什么会出现2这样的结论?? &gt;静态出现时,非静态不一定存在 &gt;静态出现的早,非静态出现的晚 静态代码块 &gt;类中其他方法外 &gt;特点:1.静态代码不是给我们调用的,是JVM自动调用 2.当我们第一次使用类时,类中的静态代码块会自动执行 3.静态代码块由优先于构造方法执行的, 作用:由于静态代码块由优先于构造方法执行的, &gt;所以静态代码块可以用来做一些初始化操作(加载数据库驱动) 内部类(分为成员内部类和局部内部类) &gt;在一个已经类A的内部定义另外一个类B,那么此时类B称为内部类,类A称为外部类 成员内部类 &gt;成员内部类:内部类定义在外部类的类中方法外 注意:创建内部类对象时,必须通过外部类对象 &gt;外部类名.内部类名 对象名 = new 外部类().new 内部类(); 局部内部类 &gt;局部内部类:内部类定义在外部类的类中方法中 注意:局部内部类只能在所定义的方法中使用 匿名内部类 &gt;匿名内部类 我们可以把他理解一种语法糖,是一种简便格式,但是原理没变 &gt;快速创建接口的实现类对象和抽象类的子类对象的简便格式 引用类型使用总结 1.基本类型可以做的引用类型也可以做 2.引用类型作为方法参数和返回值 3.引用类型作为成员变量 面试题 public class TestDemo { public static void main(String[] args) { byte b = 100; b += 100; System.out.println(b);//-56 }}","tags":[]},{"title":"《接口和多态》","date":"2019-07-18T06:30:30.631Z","path":"2019/07/18/接口和多态/","text":"接口和多态接口是一种极端的抽象类(JDK1.7) &gt;JDK1.7时,接口中只能有抽象方法 &gt;JDK1.8时,还可以有默认方法和静态方法 &gt;JDK1.9时,还可以有私有方法和私有静态方法 接口的使用–实现 接口也不能创建对象(和抽象类是一样) 接口的单实现 1.必须重写所有抽象方法 2.选择性重写默认方法,注意重写后不能有default关键字 3.静态方法没有重写的概念 接口的多实现(一个实现类可以同时实现多个接口) 1.必须重写所有接口中的所有抽象方法 如果有相同的抽象方法,只需要重写一次 2.选择性重写所有接口中的默认方法 如果有相同的默认方法,实现类必须重写一次 3.静态方法还是没有重写的概念 通过哪个接口名调用的,就是其内部自己的静态方法 接口中其他成员的特点 1.接口中是无法定义成员变量的,但是可以定义常量 2.接口中没有构造方法,也不能创建对象 3.接口中也没有静态代码块 注意: 常量必须由三个修饰符修饰: public static final(修饰符可以省略,编译器会自动添加) 接口的多继承 &gt;类和类之间: 单继承 &gt;类和接口之间: 多实现 &gt;接口和接口之间: 多继承 注意: 当使用实现类实现子接口时,相当于实现,类所有的父接口 Java中支持多继承吗??? 类与类: 不支持多继承,只支持单继承,但是支持多层继承接口和接口: 支持多继承 多态(上转型和下转型) &gt;格式: 父类类型 变量名 = new 子类类型(); &gt;同一个对象,在不同的情况下有不同的形态 多态的前提 注意:1.必须有继承关系或者实现关系 2.必须有方法的重写 多态调用方法的特点 多态调用方法,编译看父类,运行看子类 特点:多态只能调用子父类共有的方法 多态的弊端 &gt;多态只能调用子父类的共有的方法,不能调用子类特有的方法 解决方式: 向下转型(可能会导致类型转换异常:实际对象的类型和向下转型时的类型不一致) 格式: 子类类型 变量名 = (子类类型)父类对象; instanceof关键字(用来解决向下转型数据类型异常) &gt;格式:对象名 instanceof 类名 &gt;运算结果(boolean类型): 1.如果对象名 指向的对象 是右边这个类的对象,那么结果就是true 2.如果对象名 指向的对象 不是右边这个类的对象,那么结果就是false","tags":[]},{"title":"《继承、抽象类和Object类》","date":"2019-07-18T06:30:30.631Z","path":"2019/07/18/继承和抽象类/","text":"继承、抽象类和Object类类与对象 &gt;类:一群具有相同属性和行为事物统称 &gt;对象:类中的具体存在 继承(extends):子类自动拥有父类的所有非私有成员,可以直接调用. &gt;好处:1.提高代码的复用性 2.为多态提供了前提 &gt;特点:1.单一继承 2.多层继承 3.所有都直接或者间接继承Object类(根类) 注意:1.若子类和父类的成员名相同时,优先调用子类成员(就近原则);使用super关键字调用父类成员 2.当父类时抽象类时,子类需要重写父类中的所有抽象方法或者子类也声明为抽象类 方法的重写 &gt;方法的重载: 在同一个类中,方法名一样,参数列表不一样 &gt;方法的重写: 在子父类中,子类中有一个和父类一模一样的方法,那么此时子类中该方法称为方法的重写 什么时候需要重写: &gt;当子类继承后父类,发现父类的某些方法功能不足,子类可以重写该方法,增强 注意:1.子类方法覆盖/重写/覆写override父类方法，必须要保证权限大于等于父类权限 &gt;Java中有四种权限: public protected 默认 private 2.如果父类方法是私有的,那么子类是不能重写 3.重写父类的方法时,我们要保证返回值类型,方法名,参数列表都要一模一样 4.子类重写方法后,发现某些功能父类已经实现过了,只需要使用super.方法名调用父类的方法 抽象类(abstract) &gt;使用:1.抽象类不能创建对象(不能实例化) 2.抽象类天生就是被继承的 3.继承抽象类的子类必须重写父类的所有抽象方法,否则子类也是抽象类,使用abstract修饰 注意:1.抽象类不能创建对象 2.抽象类中有构造方法 3.抽象类中不一定有抽象方法,但是有抽象方法的类一定是抽象类 4.子类需要重写抽象类中的所有抽象方法或者子类也声明为抽象类 补充知识: 1.为什么子类构造的第一行会调用父类的构造 &gt;因为Java的继承系统,遵循一个原则:单一职责 &gt;单一职责:父类的成员由父类进行初始化,子类的成员由子类进行初始化 2.this调用本类构造和super调用父类构造不能同时存在 &gt;this(参数):调用本类自己的构造 &gt;super(参数):调用父类的构造 原因: 因为以上两句代码必须都写在第一行","tags":[]}]